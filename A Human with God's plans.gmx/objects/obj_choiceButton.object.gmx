<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

// Colors
color1 = c_gray;
color2 = c_gray;
    
if(view_enabled)
{
    // Positions of box1
    txtbox1_x1 = view_xview[0] + 32;
    txtbox1_y1 = view_yview[0] + 64;
    txtbox1_x2 = view_xview[0] + (view_wview[0]/2);
    txtbox1_y2 = view_yview[0] + 120;
    
    // Positions of box2
    txtbox2_x1 = view_xview[0] + (view_wview[0]/2);
    txtbox2_y1 = view_yview[0] + 64;
    txtbox2_x2 = view_xview[0] + (view_wview[0]-32);
    txtbox2_y2 = view_yview[0] + 120;
}

else
{
    // Positions of box1
    txtbox1_x1 = 32;
    txtbox1_y1 = 64;
    txtbox1_x2 = (room_width/2);
    txtbox1_y2 = 120;
    
    // Positions of box2
    txtbox2_x1 = (room_width/2);
    txtbox2_y1 = 64;
    txtbox2_x2 = (room_width-32);
    txtbox2_y2 = 120;
}

// Text positions
txtpos1_x = txtbox1_x1 + ((txtbox1_x2 - txtbox1_x1) / 2);
txtpos1_y = txtbox1_y1 + ((txtbox1_y2 - txtbox1_y1) / 2);
txtpos2_x = txtbox2_x1 + ((txtbox2_x2 - txtbox2_x1) / 2);
txtpos2_y = txtbox2_y1 + ((txtbox2_y2 - txtbox1_y1) / 2);

// Text for buttons
txt1 = "";
txt2 = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check mouse hover box and click

if (point_in_rectangle(mouse_x,mouse_y,txtbox1_x1,txtbox1_y1,txtbox1_x2,txtbox1_y2,))
{
    color1 = c_dkgray;
    
    if(mouse_check_button(mb_left) &amp;&amp; !is_undefined(scrpt1))
    {
        script_execute(scrpt1);
    }
}   
 
else
{
    color1 = c_gray;
}


if (point_in_rectangle(mouse_x,mouse_y,txtbox2_x1,txtbox2_y1,txtbox2_x2,txtbox2_y2,))
{
    color2 = c_dkgray;
    
    if(mouse_check_button(mb_left) &amp;&amp; !is_undefined(scrpt2))
    {
        script_execute(scrpt2);
    }
}   
 
else
{
    color2 = c_gray;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

// Box n1
draw_rectangle_colour(txtbox1_x1,txtbox1_y1,txtbox1_x2,txtbox1_y2,c_black,c_black,c_black,c_black,true);
draw_rectangle_colour(txtbox1_x1,txtbox1_y1,txtbox1_x2,txtbox1_y2,color1,color1,color1,color1,false);

// Box n2
draw_rectangle_colour(txtbox2_x1,txtbox2_y1,txtbox2_x2,txtbox2_y2,c_black,c_black,c_black,c_black,true);
draw_rectangle_colour(txtbox2_x1,txtbox2_y1,txtbox2_x2,txtbox2_y2,color2,color2,color2,color2,false);

// Draw Texts
// Set font and align

draw_set_font(ft_god);
draw_set_valign(fa_middle);

// Text 1

draw_text_transformed(txtpos1_x,txtpos1_y,txt1,0.8,0.8,0);

// Text 2

draw_text_transformed(txtpos2_x,txtpos2_y,txt2,0.8,0.8,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
